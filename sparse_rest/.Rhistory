densityPlot(dat$sex_num)
densityPlot(dat$tin_factor_num)
densityPlot(dat$PTA_mean)
#apply the Yeo-Johnson transformation
lambda <- yeojohnson(dat$PTA_mean)$lambda
#The value of lambda is determined such that it maximizes the log-likelihood function, making the resulting distribution of the data as close to normal as possible.
#then transform the data
dat$PTA_mean_yj <- yeojohnson(dat$PTA_mean)$x.t
densityPlot(dat$PTA_mean_yj)
## ---------------------------------------------------------------------------------------------
## Create a long format data with hemisphere as random var
## ---------------------------------------------------------------------------------------------
## Pivot data from wide to long (columns become rows)
datpivot<- function(data,namsDepVar, nampivot){
datlong <- lst()
for (i in c(1:length(namsDepVar))){
namsDep<- c(paste0(namsDepVar[i],"lh"),paste0(namsDepVar[i],"rh"))
datlong[[i]] <-data %>%
pivot_longer(
cols = all_of(namsDep),
names_to = nampivot,
names_prefix = namsDepVar[i],
values_to = namsDepVar[i],
values_drop_na = TRUE
)
}
datlong
}
## ---------------------------------------------------------
## For the model to include hemisphere as a factor,
## pivot the data to create two rows for each subject,each corresponding to
## one hemisphere, indexed by a new "hemis" variable.
nampivot <- "hemis"
tmp <- datpivot(dat,"ALFF_HG_", nampivot)
## ---------------------------------------------------------------------------------------------
## ALFF
## ---------------------------------------------------------------------------------------------
## Build the full model
## ---------------------------------------------------------------------------------------------
# correlation plot to help define interaction terms
datmod %>%
dplyr::select("ALFF_HG_","age","age_sq_orth","weight","sex_num","PTA_mean_yj","tin_factor_num") %>%
cor(.,use="complete.obs") %>%
corrplot::corrplot(.)
# Create a new dataframe only with these variables
datmod <- datclean[ , interested_vars]
View(dat)
nampivot <- "hemis"
tmp <- datpivot(dat,"ALFF_HG_", nampivot)
colnames(dat)[colnames(dat) == "ALFF_HG_lh_smooth5"] <- "ALFF_HG_lh"
colnames(dat)[colnames(dat) == "ALFF_wholeBrain_lh_smooth5"] <- "ALFF_wholeBrain_lh"
colnames(dat)[colnames(dat) == "ALFF_wholeBrain_rh_smooth5"] <- "ALFF_wholeBrain_rh"
colnames(dat)[colnames(dat) == "ALFF_HG_lh_smooth5"] <- "ALFF_HG_lh"
colnames(dat)[colnames(dat) == "ALFF_HG_rh_smooth5"] <- "ALFF_HG_rh"
colnames(dat)[colnames(dat) == "GCOR_wholeBrain_lh_smooth5"] <- "GCOR_wholeBrain_lh"
colnames(dat)[colnames(dat) == "GCOR_wholeBrain_rh_smooth5"] <- "GCOR_wholeBrain_rh"
colnames(dat)[colnames(dat) == "GCOR_HG_lh_smooth5"] <- "GCOR_HG_lh"
colnames(dat)[colnames(dat) == "GCOR_HG_rh_smooth5"] <- "GCOR_HG_rh"
nampivot <- "hemis"
tmp <- datpivot(dat,"ALFF_HG_", nampivot)
bynam <- c(namIndep,namFact,namsCovDep,namRand,nampivot)
datlong <-Reduce(function(x, y) merge(x, y, by=unique(bynam)), tmp)
datlong$hemis <- factor(datlong$hemis)
## ---------------------------------------------------------
# Convert hemis from factor to numeric
## ---------------------------------------------------------
xtabs(~hemis, datlong)
datlong$hemis_num <- ifelse(datlong$hemis == "lh", 0, 1)
xtabs(~hemis_num, datlong) # Female is 0 as reference
## Normal standardize continuous variables [(x-mean)/stdev]
standz <- function(x,na.rm = TRUE,...) {
mnx <-mean(x, na.rm = na.rm)
sdx = sd(x, na.rm = na.rm)
y <- (x-mnx)/sdx
y
}
## Also omit NaNs to make sure all models run on same dataset
datclean <- datlong %>%
mutate(age = na.omit(standz(age)),
age_sq_orth = na.omit(standz(age_sq_orth)),
sex_num = na.omit(standz(sex_num)),
weight = na.omit(standz(weight)),
PTA_mean_yj = na.omit(standz(PTA_mean_yj)),
ALFF_HG_ = na.omit(standz(ALFF_HG_)),
tin_factor_num = na.omit(standz(tin_factor_num)),
hemis_num = na.omit(standz(hemis_num)))
## ---------------------------------------------------------------------------------------------
interested_vars <- c('ID','age', 'age_sq_orth', 'weight', 'sex_num', 'PTA_mean_yj', 'tin_factor_num', 'hemis_num','ALFF_HG_')
# Create a new dataframe only with these variables
datmod <- datclean[ , interested_vars]
## ---------------------------------------------------------------------------------------------
## ALFF
## ---------------------------------------------------------------------------------------------
## Build the full model
## ---------------------------------------------------------------------------------------------
# correlation plot to help define interaction terms
datmod %>%
dplyr::select("ALFF_HG_","age","age_sq_orth","weight","sex_num","PTA_mean_yj","tin_factor_num") %>%
cor(.,use="complete.obs") %>%
corrplot::corrplot(.)
install.packages("afex")
library(afex)
(modfull <- lmer(ALFF_HG_ ~ 1 + age + PTA_mean_yj + tin_factor_num + age:PTA_mean_yj + (1 + hemis| ID), data = datmod))
View(datmod)
(modfull <- lmer(ALFF_HG_ ~ 1 + age + PTA_mean_yj + tin_factor_num + age:PTA_mean_yj + (1 + hemis_num| ID), data = datmod))
all_fit(modfull)
load(afex)
library(afex)
allFit()
allFit(modfull)
(modfull <- lmer(ALFF_HG_ ~ 1 + age + PTA_mean_yj + tin_factor_num + age:PTA_mean_yj + (1 + hemis_num| ID), data = datmod))
View(datmod)
(modfull <- lmer(ALFF_HG_ ~ 1 + age + PTA_mean_yj + tin_factor_num + age:PTA_mean_yj + (1 | ID), data = datmod))
allFit(modfull)
(modfull <- lmer(ALFF_HG_ ~ 1 + age + PTA_mean_yj + tin_factor_num + age:PTA_mean_yj + (1 | ID), data = datmod, control = lmerControl(optimizer = "bobyqa")))
# likelihood ratio test using mixed function from afex package
# it will not show the reduced models that were built in to obtain the relevant p values, so the temptation to inadvertly p-hack is reduced
mixed(ALFF_HG_ ~ 1 + age + PTA_mean_yj + tin_factor_num + age:PTA_mean_yj + (1 | ID), data = datmod, control = lmerControl(optimizer = "bobyqa"), method='LRT')
# likelihood ratio test using mixed function from afex package
# it will not show the reduced models that were built in to obtain the relevant p values, so the temptation to inadvertly p-hack is reduced
mixed(ALFF_HG_ ~ 1 + age + PTA_mean_yj + tin_factor_num + age:PTA_mean_yj + (1 | ID), data = datmod, control = lmerControl(optimizer = "bobyqa"), method='LRT')
?mized
?mixed
# likelihood ratio test using mixed function from afex package
# it will not show the reduced models that were built in to obtain the relevant p values, so the temptation to inadvertly p-hack is reduced
mixed(ALFF_HG_ ~ 1 + age + (1 | ID), data = datmod, control = lmerControl(optimizer = "bobyqa"), method='LRT')
mixed(ALFF_HG_ ~ 1 + age + (1 | ID), data = datmod, method = 'LRT', control = lmerControl(optimizer = "bobyqa"))
# likelihood ratio test using mixed function from afex package
# it will not show the reduced models that were built in to obtain the relevant p values, so the temptation to inadvertly p-hack is reduced
mixed(ALFF_HG_ ~ 1 + age + (1 | ID), data = datmod, method='LRT')
update.packages()
Yes
# likelihood ratio test using mixed function from afex package
# it will not show the reduced models that were built in to obtain the relevant p values, so the temptation to inadvertly p-hack is reduced
mixed(ALFF_HG_ ~ 1 + age + (1 | ID), data = datmod, method='LRT')
mod <- lmer(ALFF_HG_ ~ 1 + age + (1 | ID), data = datmod, control = lmerControl(optimizer = "bobyqa"))
mod <- mixed(ALFF_HG_ ~ 1 + age + (1 | ID), data = datmod)
na.omit(datmod)
mod <- mixed(ALFF_HG_ ~ 1 + age + (1 | ID), data = datmod)
data(mtcars)
mtcars$cyl <- as.factor(mtcars$cyl)
mod <- mixed(mpg ~ 1 + (1 | cyl), data = mtcars)
(modfull <- lmer(ALFF_HG_ ~ 1 + age + PTA_mean_yj + tin_factor_num + age:PTA_mean_yj + (1 | ID), data = datmod, control = lmerControl(optimizer = "bobyqa")))
summary(modfull)
coef(modfull)
## to see the correlation matrix
vcov(modfull)
summary(modfull)
(modfull <- lmer(ALFF_HG_ ~ 1 + age + sex_num + PTA_mean_yj + tin_factor_num + age:PTA_mean_yj + (1 | ID), data = datmod, control = lmerControl(optimizer = "bobyqa")))
summary(modfull)
(modfull <- lmer(ALFF_HG_ ~ 1 + age + sex_num + PTA_mean_yj + tin_factor_num + (1 | ID), data = datmod, control = lmerControl(optimizer = "bobyqa")))
summary(modfull)
(modfull <- lmer(ALFF_HG_ ~ 1 + age + sex_num + PTA_mean_yj + tin_factor_num + age:PTA_mean_yj + (1 | ID), data = datmod, control = lmerControl(optimizer = "bobyqa")))
summary(modfull)
View(datclean)
-19.695/5.585
# Create a new dataframe only with these variables
datmod <- datclean[ , interested_vars]
boxplot(ALFF_HG_ ~ tin_factor_num*sex_num, col=c("white","lightgray"),datmod)
boxplot(ALFF_HG_ ~ tin_factor_num*sex, col=c("white","lightgray"),datclean)
boxplot(ALFF_HG_ ~ tin_factor*sex, col=c("white","lightgray"),datclean)
boxplot(ALFF_HG_ ~ tin_factor*hemis, col=c("white","lightgray"),datclean)
# Check the relationship between hemisphere and ALFF with a boxplot
boxplot(ALFF_HG_ ~ hemis, col="lightgray",datclean)
# Check the relationship between hemisphere and ALFF with a boxplot
boxplot(ALFF_HG_ ~ tin_factor*hemis, col=c("white","lightgray"),datclean)
# Check the relationship between hemisphere and ALFF with a boxplot
boxplot(ALFF_HG_ ~ tin_factor*hemis, col=c("white","lightgray"),datclean)
boxplot(ALFF_HG_ ~ hemis, col="lightgray",datclean)
## ---------------------------------------------------------------------------------------------
## ALFF
## ---------------------------------------------------------------------------------------------
## Build the full model
## ---------------------------------------------------------------------------------------------
# correlation plot to help define interaction terms
datmod %>%
dplyr::select("ALFF_HG_","age","age_sq_orth","weight","sex_num","PTA_mean_yj","tin_factor_num") %>%
cor(.,use="complete.obs") %>%
corrplot::corrplot(.)
## ---------------------------------------------------------------------------------------------
## ALFF
## ---------------------------------------------------------------------------------------------
## Build the full model
## ---------------------------------------------------------------------------------------------
# correlation plot to help define interaction terms
datmod %>%
dplyr::select("ALFF_HG_","age","age_sq_orth","weight","sex_num","PTA_mean_yj","tin_factor_num","hemis_num") %>%
cor(.,use="complete.obs") %>%
corrplot::corrplot(.)
## ---------------------------------------------------------------------------------------------
interested_vars <- c('ID','age', 'age_sq_orth', 'weight', 'sex_num', 'PTA_mean_yj', 'tin_factor_num', 'hemis_num','ALFF_HG_')
# Create a new dataframe only with these variables
datmod <- datclean[ , interested_vars]
## ---------------------------------------------------------------------------------------------
## ALFF
## ---------------------------------------------------------------------------------------------
## Build the full model
## ---------------------------------------------------------------------------------------------
# correlation plot to help define interaction terms
datmod %>%
dplyr::select("ALFF_HG_","age","age_sq_orth","weight","sex_num","PTA_mean_yj","tin_factor_num","hemis_num") %>%
cor(.,use="complete.obs") %>%
corrplot::corrplot(.)
corrplot
coef(corrplot)
## ---------------------------------------------------------------------------------------------
## ALFF
## ---------------------------------------------------------------------------------------------
## Build the full model
## ---------------------------------------------------------------------------------------------
# correlation plot to help define interaction terms
cor_datmod <- datmod %>%
dplyr::select("ALFF_HG_","age","age_sq_orth","weight","sex_num","PTA_mean_yj","tin_factor_num","hemis_num") %>%
cor(.,use="complete.obs") %>%
corrplot::corrplot(.)
## ---------------------------------------------------------------------------------------------
## ALFF
## ---------------------------------------------------------------------------------------------
## Build the full model
## ---------------------------------------------------------------------------------------------
# correlation plot to help define interaction terms
cor_datmod <- datmod %>%
dplyr::select("ALFF_HG_","age","age_sq_orth","weight","sex_num","PTA_mean_yj","tin_factor_num","hemis_num") %>%
cor(.,use="complete.obs") %>%
corrplot::corrplot(.)
print(cor_datmod)
print(cor_datmod$corr)
# Check the relationship between hemisphere and ALFF with a boxplot
boxplot(ALFF_HG_ ~ tin_factor*hemis, col=c("white","lightgray"),datclean)
boxplot(ALFF_HG_ ~ hemis, col="lightgray",datclean)
# Check the relationship between age and ALFF with a boxplot
boxplot(ALFF_HG_ ~ age, col="lightgray",datclean)
boxplot(ALFF_HG_ ~ tin_factor*age, col=c("white","lightgray"),datclean)
boxplot(ALFF_HG_ ~ PTA_mean_yj*age, col=c("white","lightgray"),datclean)
(modfull_noint <- lmer(ALFF_HG_ ~ 1 + age + age_sq_orth + weight + sex_num + PTA_mean_yj + tin_factor_num + hemis_num + PTA_mean_yj + (1 | ID), data = datmod))
# How to select an optimizer (if the model does not converge)
allFit(modfull_noint)
(modfull_noint <- lmer(ALFF_HG_ ~ 1 + age + age_sq_orth + weight + sex_num + PTA_mean_yj + tin_factor_num + hemis_num + PTA_mean_yj + (1 | ID), data = datmod, control = lmerControl(optimizer = "bobyqa")))
summary(modfull)
(modfull_noint <- lmer(ALFF_HG_ ~ 1 + age + age_sq_orth + weight  + PTA_mean_yj + tin_factor_num + hemis_num + PTA_mean_yj + (1 | ID), data = datmod))
summary(modfull_noint)
(modfull_noint <- lmer(ALFF_HG_ ~ 1 + age + age_sq_orth + weight + sex_num + PTA_mean_yj + tin_factor_num + hemis_num + PTA_mean_yj + (1 | ID), data = datmod, control = lmerControl(optimizer = "bobyqa")))
summary(modfull_noint)
(modfull_noint_noage <- lmer(ALFF_HG_ ~ 1 + weight + sex_num + PTA_mean_yj + tin_factor_num + hemis_num + PTA_mean_yj + (1 | ID), data = datmod, control = lmerControl(optimizer = "bobyqa")))
anova(modfull_noint_noage, modfull_noint)
# Likelihood ratio test to compare the model
(modfull_noint_noage <- lmer(ALFF_HG_ ~ 1 + weight + sex_num + PTA_mean_yj + tin_factor_num + hemis_num + PTA_mean_yj + (1 | ID), data = datmod, control = lmerControl(optimizer = "bobyqa"), REML=FALSE))
(modfull_noint <- lmer(ALFF_HG_ ~ 1 + age + age_sq_orth + weight + sex_num + PTA_mean_yj + tin_factor_num + hemis_num + PTA_mean_yj + (1 | ID), data = datmod, control = lmerControl(optimizer = "bobyqa"), REML=FALSE))
anova(modfull_noint_noage, modfull_noint)
?lmer
(modfull_noint_notin <- lmer(ALFF_HG_ ~ 1 + age + age_sq_orth + weight + sex_num + PTA_mean_yj + hemis_num + PTA_mean_yj + (1 | ID), data = datmod, control = lmerControl(optimizer = "bobyqa"), REML=FALSE))
anova(modfull_noint_notin, modfull_noint)
anova(modfull_noint_noage, modfull_noint)
anova(modfull_noint_notin, modfull_noint)
summary(modfull_noint)
## ---------------------------------------------------------------------------------------------
## ALFF
## ---------------------------------------------------------------------------------------------
## Build the full mixed-effects model including random effects
## ---------------------------------------------------------------------------------------------
# correlation plot to help define interaction terms
cor_datmod <- datmod %>%
dplyr::select("ALFF_HG_","age","age_sq_orth","weight","sex_num","PTA_mean_yj","tin_factor_num","hemis_num") %>%
cor(.,use="complete.obs") %>%
corrplot::corrplot(.)
## ---------------------------------------------------------------------------------------------
# hemis as a fix effect -> to test differences in ALFF between hemispheres on average across subjects
(modfull_noint <- lmer(ALFF_HG_ ~ (1 + age + age_sq_orth + weight + sex_num + PTA_mean_yj + tin_factor_num + PTA_mean_yj) * hemis_num + (1 | ID), data = datmod))
# How to select an optimizer (if the model does not converge)
allFit(modfull_noint)
# Re-run model with optimizer (won't change if the earlier model already coverge)
(modfull_noint <- lmer(ALFF_HG_ ~ (1 + age + age_sq_orth + weight + sex_num + PTA_mean_yj + tin_factor_num + PTA_mean_yj) * hemis_num + (1 | ID), data = datmod, control = lmerControl(optimizer = "bobyqa")))
summary(modfull_noint)
# Likelihood ratio test to compare the model
(modfull_noint <- lmer(ALFF_HG_ ~ (1 + age + age_sq_orth + weight + sex_num + PTA_mean_yj + tin_factor_num + PTA_mean_yj) * hemis_num + (1 | ID), data = datmod, control = lmerControl(optimizer = "bobyqa"), REML=FALSE))
(modfull_noint_noage <- lmer(ALFF_HG_ ~ (1 + weight + sex_num + PTA_mean_yj + tin_factor_num + PTA_mean_yj) * hemis_num + (1 | ID), data = datmod, control = lmerControl(optimizer = "bobyqa"), REML=FALSE))
anova(modfull_noint_noage, modfull_noint)
summary(modfull_noint)
anova(modfull_noint_noage, modfull_noint)
(modfull_noint_notin <- lmer(ALFF_HG_ ~ (1 + age + age_sq_orth + weight + sex_num + PTA_mean_yj + PTA_mean_yj) * hemis_num + (1 | ID), data = datmod, control = lmerControl(optimizer = "bobyqa"), REML=FALSE))
anova(modfull_noint_notin, modfull_noint)
summary(modfull_noint)
setwd("/Volumes/gdrive4tb/IGNITE/code/sparse_rest")
library(dplyr)
library(ggplot2)
library(scales)  # for logarithmic scales
library(ggpubr)  # for drawing lines between points
## Clear variables from workspace
rm(list = setdiff(ls(), lsf.str()))
rm(list = setdiff(ls(), lsf.str()))
# Define the directory paths for ALFF and GCOR files
alff_directory <- "/Volumes/gdrive4tb/IGNITE/sparse_rest/surface/analysis/ALFF"
gcor_directory <- "/Volumes/gdrive4tb/IGNITE/sparse_rest/surface/analysis/ReHo"
## Clear variables from workspace
rm(list = setdiff(ls(), lsf.str()))
# Define the directory paths for ALFF and GCOR files
alff_directory <- "/Volumes/gdrive4tb/IGNITE/sparse_rest/surface/analysis/ALFF"
reho_directory <- "/Volumes/gdrive4tb/IGNITE/sparse_rest/surface/analysis/ReHo"
# Define the list of subjects
subjects <- list.files(path = "/Volumes/gdrive4tb/IGNITE/sparse_rest/preprocessed", full.names = FALSE, recursive = FALSE)
# Create empty data frames for each area
dat_HG_rest_NT <- data.frame()
dat_HG_rest_TT <- data.frame()
dat_HG_vis_NT <- data.frame()
dat_HG_vis_TT <- data.frame()
setwd("/Volumes/gdrive4tb/IGNITE/code/sparse_rest")
library(dplyr)
library(ggplot2)
library(scales)  # for logarithmic scales
library(ggpubr)  # for drawing lines between points
## Clear variables from workspace
rm(list = setdiff(ls(), lsf.str()))
# Define the directory paths for ALFF and GCOR files
alff_directory <- "/Volumes/gdrive4tb/IGNITE/sparse_rest/surface/analysis/ALFF"
reho_directory <- "/Volumes/gdrive4tb/IGNITE/sparse_rest/surface/analysis/ReHo"
# Define the list of subjects
subjects <- list.files(path = "/Volumes/gdrive4tb/IGNITE/sparse_rest/preprocessed", full.names = FALSE, recursive = FALSE)
# Create empty data frames for each area
dat_HG_rest_NT <- data.frame()
dat_HG_rest_TT <- data.frame()
dat_HG_vis_NT <- data.frame()
dat_HG_vis_TT <- data.frame()
# Loop through the subject folders
for (subject in subjects) {
# Loop through the main folders
for (main_folder in c(alff_directory, reho_directory)) {
# Set the path to the meanValues subfolder for the current subject and main folder
meanValues_path <- paste0(main_folder, "/meanValues/", subject)
# Get the list of files in the meanValues subfolder
file_list <- list.files(meanValues_path)
file_list <- file_list[grepl("smooth5", file_list)]
# Loop through the files
for (file_name in file_list) {
# Read the file using readLines()
file_path <- paste0(meanValues_path, "/", file_name)
lines <- readLines(file_path)
# Extract decimal value from the text
decimal_value <- as.numeric(lines[grep("\\d+\\.\\d+", lines)])
# Extract relevant information from the file name
file_name <- gsub("sub-\\d+_(\\w+)_HG_(\\w+)\\.txt", "\\1_\\2", file_name)
if (grepl("NT.*rest", file_name)) {
column_name_NT <- gsub("IGNT(\\w+)_\\d+_(\\w+).*", "NT_\\2", file_name)
# Add the data to the dataframe
dat_HG_rest_NT[subject,column_name_NT] = decimal_value
} else if (grepl("TT.*rest", file_name)) {
column_name_TT <- gsub("IGTT(\\w+)_\\d+_(\\w+).*", "TT_\\2", file_name)
# Add the data to the dataframe
dat_HG_rest_TT[subject,column_name_TT] = decimal_value
} else if (grepl("NT.*vis", file_name)) {
column_name_NT <- gsub("IGNT(\\w+)_\\d+_(\\w+).*", "NT_\\2", file_name)
# Add the data to the dataframe
dat_HG_vis_NT[subject,column_name_NT] = decimal_value
} else if (grepl("TT.*vis", file_name)) {
column_name_TT <- gsub("IGTT(\\w+)_\\d+_(\\w+).*", "TT_\\2", file_name)
# Add the data to the dataframe
dat_HG_vis_TT[subject,column_name_TT] = decimal_value
}
}
}
}
View(dat_HG_rest_NT)
NT_rest_mean <- mean(dat_HG_rest_NT$NT_lh_ALFF_rest_smooth5, na.rm = TRUE)
NT_rest_sem <- sd(dat_HG_rest_NT$NT_lh_ALFF_rest_smooth5, na.rm = TRUE) / sqrt(nrow(dat_HG_rest_NT))
TT_rest_mean <- mean(dat_HG_rest_TT$TT_lh_ALFF_rest_smooth5, na.rm = TRUE)
TT_rest_sem <- sd(dat_HG_rest_TT$TT_lh_ALFF_rest_smooth5, na.rm = TRUE) / sqrt(nrow(dat_HG_rest_TT))
NT_vis_mean <- mean(dat_HG_vis_NT$NT_lh_ALFF_vis_smooth5, na.rm = TRUE)
NT_vis_sem <- sd(dat_HG_vis_NT$NT_lh_ALFF_vis_smooth5, na.rm = TRUE) / sqrt(nrow(dat_HG_vis_NT))
TT_vis_mean <- mean(dat_HG_vis_TT$TT_lh_ALFF_vis_smooth5, na.rm = TRUE)
TT_vis_sem <- sd(dat_HG_vis_TT$TT_lh_ALFF_vis_smooth5, na.rm = TRUE) / sqrt(nrow(dat_HG_vis_TT))
# create a dataframe for plotting
plot_df <- data.frame(
Group = c(rep("No tinnitus", 2), rep("Tinnitus", 2)),
Condition = rep(c("Rest", "Vis"), 2),
Mean = c(NT_rest_mean, NT_vis_mean, TT_rest_mean, TT_vis_mean),
SEM = c(NT_rest_sem, NT_vis_sem, TT_rest_sem, TT_vis_sem)
)
# create a bar plot
ggplot(plot_df, aes(x=Group, y=Mean, fill=Condition)) +
geom_bar(stat="identity", position="dodge", width=0.5) +
geom_errorbar(aes(ymin=Mean-SEM, ymax=Mean+SEM), width=.1, position=position_dodge(.5)) +
scale_fill_manual(values=c("Rest" = "blue", "Vis" = "red")) +
ylab("Mean ALFF") +
ylim(0, 1.5) +
ggtitle("ALFF Heschl's gyrus lh During Rest and Vis") +
theme_bw() +
theme(panel.grid = element_blank())
NT_rest_mean <- mean(dat_HG_rest_NT$NT_lh_ReHo_rest_smooth5, na.rm = TRUE)
NT_rest_sem <- sd(dat_HG_rest_NT$NT_lh_ReHo_rest_smooth5, na.rm = TRUE) / sqrt(nrow(dat_HG_rest_NT))
TT_rest_mean <- mean(dat_HG_rest_TT$TT_lh_ReHo_rest_smooth5, na.rm = TRUE)
TT_rest_sem <- sd(dat_HG_rest_TT$TT_lh_ReHo_rest_smooth5, na.rm = TRUE) / sqrt(nrow(dat_HG_rest_TT))
NT_vis_mean <- mean(dat_HG_vis_NT$NT_lh_ReHo_vis_smooth5, na.rm = TRUE)
NT_vis_sem <- sd(dat_HG_vis_NT$NT_lh_ReHo_vis_smooth5, na.rm = TRUE) / sqrt(nrow(dat_HG_vis_NT))
TT_vis_mean <- mean(dat_HG_vis_TT$TT_lh_ReHo_vis_smooth5, na.rm = TRUE)
TT_vis_sem <- sd(dat_HG_vis_TT$TT_lh_ReHo_vis_smooth5, na.rm = TRUE) / sqrt(nrow(dat_HG_vis_TT))
# create a dataframe for plotting
plot_df <- data.frame(
Group = c(rep("No tinnitus", 2), rep("Tinnitus", 2)),
Condition = rep(c("Rest", "Vis"), 2),
Mean = c(NT_rest_mean, NT_vis_mean, TT_rest_mean, TT_vis_mean),
SEM = c(NT_rest_sem, NT_vis_sem, TT_rest_sem, TT_vis_sem)
)
# create a bar plot
ggplot(plot_df, aes(x=Group, y=Mean, fill=Condition)) +
geom_bar(stat="identity", position="dodge", width=0.5) +
geom_errorbar(aes(ymin=Mean-SEM, ymax=Mean+SEM), width=.1, position=position_dodge(.5)) +
scale_fill_manual(values=c("Rest" = "blue", "Vis" = "red")) +
ylab("Mean ReHo") +
ylim(0, 0.03) +
ggtitle("ReHo Heschl's gyrus lh During Rest and Vis") +
theme_bw() +
theme(panel.grid = element_blank())
plot_df
# create a bar plot
ggplot(plot_df, aes(x=Group, y=Mean, fill=Condition)) +
geom_bar(stat="identity", position="dodge", width=0.5) +
geom_errorbar(aes(ymin=Mean-SEM, ymax=Mean+SEM), width=.1, position=position_dodge(.5)) +
scale_fill_manual(values=c("Rest" = "blue", "Vis" = "red")) +
ylab("Mean ReHo") +
ggtitle("ReHo Heschl's gyrus lh During Rest and Vis") +
theme_bw() +
theme(panel.grid = element_blank())
# create a bar plot
ggplot(plot_df, aes(x=Group, y=Mean, fill=Condition)) +
geom_bar(stat="identity", position="dodge", width=0.5) +
geom_errorbar(aes(ymin=Mean-SEM, ymax=Mean+SEM), width=.1, position=position_dodge(.5)) +
scale_fill_manual(values=c("Rest" = "blue", "Vis" = "red")) +
ylab("Mean ReHo") +
ylim(0, 0.1) +
ggtitle("ReHo Heschl's gyrus lh During Rest and Vis") +
theme_bw() +
theme(panel.grid = element_blank())
NT_rest_mean <- mean(dat_HG_rest_NT$NT_rh_ReHo_rest_smooth5, na.rm = TRUE)
NT_rest_sem <- sd(dat_HG_rest_NT$NT_rh_ReHo_rest_smooth5, na.rm = TRUE) / sqrt(nrow(dat_HG_rest_NT))
TT_rest_mean <- mean(dat_HG_rest_TT$TT_rh_ReHo_rest_smooth5, na.rm = TRUE)
TT_rest_sem <- sd(dat_HG_rest_TT$TT_rh_ReHo_rest_smooth5, na.rm = TRUE) / sqrt(nrow(dat_HG_rest_TT))
NT_vis_mean <- mean(dat_HG_vis_NT$NT_rh_ReHo_vis_smooth5, na.rm = TRUE)
NT_vis_sem <- sd(dat_HG_vis_NT$NT_rh_ReHo_vis_smooth5, na.rm = TRUE) / sqrt(nrow(dat_HG_vis_NT))
TT_vis_mean <- mean(dat_HG_vis_TT$TT_rh_ReHo_vis_smooth5, na.rm = TRUE)
TT_vis_sem <- sd(dat_HG_vis_TT$TT_rh_ReHo_vis_smooth5, na.rm = TRUE) / sqrt(nrow(dat_HG_vis_TT))
# create a dataframe for plotting
plot_df <- data.frame(
Group = c(rep("No tinnitus", 2), rep("Tinnitus", 2)),
Condition = rep(c("Rest", "Vis"), 2),
Mean = c(NT_rest_mean, NT_vis_mean, TT_rest_mean, TT_vis_mean),
SEM = c(NT_rest_sem, NT_vis_sem, TT_rest_sem, TT_vis_sem)
)
# create a bar plot
ggplot(plot_df, aes(x=Group, y=Mean, fill=Condition)) +
geom_bar(stat="identity", position="dodge", width=0.5) +
geom_errorbar(aes(ymin=Mean-SEM, ymax=Mean+SEM), width=.1, position=position_dodge(.5)) +
scale_fill_manual(values=c("Rest" = "blue", "Vis" = "red")) +
ylab("Mean ReHo") +
ylim(0, 0.1) +
ggtitle("ReHo Heschl's gyrus rh During Rest and Vis") +
theme_bw() +
theme(panel.grid = element_blank())
NT_rest_mean <- mean(dat_HG_rest_NT$NT_lh_ReHo_rest_smooth5, na.rm = TRUE)
NT_rest_sem <- sd(dat_HG_rest_NT$NT_lh_ReHo_rest_smooth5, na.rm = TRUE) / sqrt(nrow(dat_HG_rest_NT))
TT_rest_mean <- mean(dat_HG_rest_TT$TT_lh_ReHo_rest_smooth5, na.rm = TRUE)
TT_rest_sem <- sd(dat_HG_rest_TT$TT_lh_ReHo_rest_smooth5, na.rm = TRUE) / sqrt(nrow(dat_HG_rest_TT))
NT_vis_mean <- mean(dat_HG_vis_NT$NT_lh_ReHo_vis_smooth5, na.rm = TRUE)
NT_vis_sem <- sd(dat_HG_vis_NT$NT_lh_ReHo_vis_smooth5, na.rm = TRUE) / sqrt(nrow(dat_HG_vis_NT))
TT_vis_mean <- mean(dat_HG_vis_TT$TT_lh_ReHo_vis_smooth5, na.rm = TRUE)
TT_vis_sem <- sd(dat_HG_vis_TT$TT_lh_ReHo_vis_smooth5, na.rm = TRUE) / sqrt(nrow(dat_HG_vis_TT))
# create a dataframe for plotting
plot_df <- data.frame(
Group = c(rep("No tinnitus", 2), rep("Tinnitus", 2)),
Condition = rep(c("Rest", "Vis"), 2),
Mean = c(NT_rest_mean, NT_vis_mean, TT_rest_mean, TT_vis_mean),
SEM = c(NT_rest_sem, NT_vis_sem, TT_rest_sem, TT_vis_sem)
)
# create a bar plot
ggplot(plot_df, aes(x=Group, y=Mean, fill=Condition)) +
geom_bar(stat="identity", position="dodge", width=0.5) +
geom_errorbar(aes(ymin=Mean-SEM, ymax=Mean+SEM), width=.1, position=position_dodge(.5)) +
scale_fill_manual(values=c("Rest" = "blue", "Vis" = "red")) +
ylab("Mean ReHo") +
ylim(0, 0.1) +
ggtitle("ReHo Heschl's gyrus lh During Rest and Vis") +
theme_bw() +
theme(panel.grid = element_blank())
ggsave("/Volumes/gdrive4tb/IGNITE/sparse_rest/surface/analysis/keyFigures/barP_ReHo_Tin_noTin_HG_lh.png",width = 6, height = 4)
## ---------------------------------------------------------------------------------------------
## New dataframe for plotting of ReHo HG rh
## ---------------------------------------------------------------------------------------------
# calculate mean and SEM for each dataframe
NT_rest_mean <- mean(dat_HG_rest_NT$NT_rh_ReHo_rest_smooth5, na.rm = TRUE)
NT_rest_sem <- sd(dat_HG_rest_NT$NT_rh_ReHo_rest_smooth5, na.rm = TRUE) / sqrt(nrow(dat_HG_rest_NT))
TT_rest_mean <- mean(dat_HG_rest_TT$TT_rh_ReHo_rest_smooth5, na.rm = TRUE)
TT_rest_sem <- sd(dat_HG_rest_TT$TT_rh_ReHo_rest_smooth5, na.rm = TRUE) / sqrt(nrow(dat_HG_rest_TT))
NT_vis_mean <- mean(dat_HG_vis_NT$NT_rh_ReHo_vis_smooth5, na.rm = TRUE)
NT_vis_sem <- sd(dat_HG_vis_NT$NT_rh_ReHo_vis_smooth5, na.rm = TRUE) / sqrt(nrow(dat_HG_vis_NT))
TT_vis_mean <- mean(dat_HG_vis_TT$TT_rh_ReHo_vis_smooth5, na.rm = TRUE)
TT_vis_sem <- sd(dat_HG_vis_TT$TT_rh_ReHo_vis_smooth5, na.rm = TRUE) / sqrt(nrow(dat_HG_vis_TT))
# create a dataframe for plotting
plot_df <- data.frame(
Group = c(rep("No tinnitus", 2), rep("Tinnitus", 2)),
Condition = rep(c("Rest", "Vis"), 2),
Mean = c(NT_rest_mean, NT_vis_mean, TT_rest_mean, TT_vis_mean),
SEM = c(NT_rest_sem, NT_vis_sem, TT_rest_sem, TT_vis_sem)
)
# create a bar plot
ggplot(plot_df, aes(x=Group, y=Mean, fill=Condition)) +
geom_bar(stat="identity", position="dodge", width=0.5) +
geom_errorbar(aes(ymin=Mean-SEM, ymax=Mean+SEM), width=.1, position=position_dodge(.5)) +
scale_fill_manual(values=c("Rest" = "blue", "Vis" = "red")) +
ylab("Mean ReHo") +
ylim(0, 0.1) +
ggtitle("ReHo Heschl's gyrus rh During Rest and Vis") +
theme_bw() +
theme(panel.grid = element_blank())
ggsave("/Volumes/gdrive4tb/IGNITE/sparse_rest/surface/analysis/keyFigures/barP_ReHo_Tin_noTin_HG_rh.png",width = 6, height = 4)
